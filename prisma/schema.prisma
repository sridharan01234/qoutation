generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

// Authentication Models
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String      @id @default(cuid())
  name          String?
  email         String      @unique
  emailVerified DateTime?
  password      String
  image         String?
  role          Role        @default(USER)
  accounts      Account[]
  sessions      Session[]
  isActive      Boolean     @default(true)
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  quotations    Quotation[] // Added relation to quotations
  customer      Customer?   // Added relation to customer
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// Enums
enum Role {
  ADMIN
  MANAGER
  USER
}

enum ProductStatus {
  IN_STOCK
  LOW_STOCK
  OUT_OF_STOCK
  DISCONTINUED
}

enum QuotationStatus {
  DRAFT
  PENDING
  APPROVED
  REJECTED
  EXPIRED
  CONVERTED
  CANCELLED
}

enum PaymentTerms {
  IMMEDIATE
  NET_15
  NET_30
  NET_45
  NET_60
  CUSTOM
}

// Product Management Models
model Category {
  id        String    @id @default(cuid())
  name      String    @unique
  products  Product[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Product {
  id            String          @id @default(cuid())
  name          String
  description   String?         @db.Text
  category      Category        @relation(fields: [categoryId], references: [id])
  categoryId    String
  price         Float
  stock         Int
  sku           String          @unique
  image         String?         @db.Text
  status        ProductStatus   @default(IN_STOCK)
  featured      Boolean         @default(false)
  weight        Float?          // in kg
  dimensions    Json?           // { length, width, height }
  tags          ProductTag[]
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  quotationItems QuotationItem[] // Added relation to quotation items

  @@index([categoryId])
  @@index([status])
  @@index([sku])
}

model ProductTag {
  id       String    @id @default(cuid())
  name     String
  products Product[]
}

// Quotation Management Models
model Customer {
  id          String      @id @default(cuid())
  userId      String?     @unique // Link to User if they have an account
  user        User?       @relation(fields: [userId], references: [id])
  name        String
  company     String?
  email       String
  phone       String?
  address     Address?
  taxId       String?
  quotations  Quotation[]
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  notes       String?     @db.Text
  isActive    Boolean     @default(true)
}

model Address {
  id          String    @id @default(cuid())
  customerId  String    @unique
  customer    Customer  @relation(fields: [customerId], references: [id], onDelete: Cascade)
  street      String
  city        String
  state       String?
  postalCode  String?
  country     String
  isDefault   Boolean   @default(true)
}

model Quotation {
  id              String           @id @default(cuid())
  quotationNumber String          @unique // QT-2024-001
  customerId      String
  customer        Customer        @relation(fields: [customerId], references: [id])
  userId          String          // Sales person or creator
  user            User            @relation(fields: [userId], references: [id])
  date            DateTime        @default(now())
  validUntil      DateTime
  status          QuotationStatus @default(DRAFT)
  items           QuotationItem[]
  subtotal        Float
  taxRate         Float           @default(0)
  taxAmount       Float           @default(0)
  discount        Float           @default(0)
  discountType    String?         // percentage or fixed
  shippingCost    Float           @default(0)
  totalAmount     Float
  notes           String?         @db.Text
  terms           String?         @db.Text
  paymentTerms    PaymentTerms    @default(IMMEDIATE)
  currency        String          @default("USD")
  revisionNumber  Int             @default(0)
  attachments     Attachment[]
  activities      Activity[]
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt

  @@index([quotationNumber])
  @@index([customerId])
  @@index([userId])
  @@index([status])
}

model QuotationItem {
  id          String    @id @default(cuid())
  quotationId String
  quotation   Quotation @relation(fields: [quotationId], references: [id], onDelete: Cascade)
  productId   String
  product     Product   @relation(fields: [productId], references: [id])
  quantity    Int
  unitPrice   Float
  discount    Float     @default(0)
  tax         Float     @default(0)
  total       Float
  notes       String?   @db.Text

  @@index([quotationId])
  @@index([productId])
}

model Attachment {
  id          String    @id @default(cuid())
  quotationId String
  quotation   Quotation @relation(fields: [quotationId], references: [id], onDelete: Cascade)
  filename    String
  fileUrl     String    @db.Text
  fileType    String
  fileSize    Int
  uploadedAt  DateTime  @default(now())

  @@index([quotationId])
}

model Activity {
  id          String    @id @default(cuid())
  quotationId String
  quotation   Quotation @relation(fields: [quotationId], references: [id], onDelete: Cascade)
  userId      String
  type        String    // CREATED, UPDATED, STATUS_CHANGED, etc.
  description String    @db.Text
  createdAt   DateTime  @default(now())

  @@index([quotationId])
  @@index([userId])
}

// prisma/schema.prisma

model Notification {
  id        String   @id @default(cuid())
  userId    String
  title     String
  message   String
  read      Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
  @@index([read])
}

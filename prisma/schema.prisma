generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId], map: "Account_userId_fkey")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId], map: "Session_userId_fkey")
}

enum Gender {
  MALE
  FEMALE
  OTHER
}

model User {
  id              String      @id @default(cuid())
  name            String?
  email           String      @unique
  emailVerified   DateTime?
  password        String
  image           String?
  role            Role        @default(USER)
  isActive        Boolean     @default(true)
  
  // Personal Information
  firstName       String?
  lastName        String?
  displayName     String?
  gender          Gender?
  dateOfBirth     DateTime?
  phoneNumber     String?
  
  // Address Information
  address         String?
  city           String?
  state          String?
  country        String?
  postalCode     String?
  
  // Business Information
  company        String?
  jobTitle       String?
  department     String?
  
  // Preferences
  language       String?     @default("en")
  timezone       String?     @default("UTC")
  currency       String?     @default("USD")
  
  // Communication Preferences
  emailNotifications Boolean @default(true)
  smsNotifications   Boolean @default(false)
  
  // Social Media
  linkedinUrl    String?
  twitterUrl     String?
  websiteUrl     String?
  
  // System Fields
  lastLoginAt    DateTime?
  createdAt      DateTime    @default(now())
  updatedAt      DateTime    @updatedAt
  
  // Relations
  accounts       Account[]
  quotations     Quotation[]
  sessions       Session[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Category {
  id        String    @id @default(cuid())
  name      String    @unique
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  products  Product[]
}

model Product {
  id             String          @id @default(cuid())
  name           String
  description    String?         @db.Text
  categoryId     String
  price          Float
  stock          Int
  sku            String          @unique
  image          String?         @db.Text
  status         ProductStatus   @default(IN_STOCK)
  featured       Boolean         @default(false)
  weight         Float?
  dimensions     Json?
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  category       Category        @relation(fields: [categoryId], references: [id])
  quotationItems QuotationItem[]
  tags           ProductTag[]    @relation("ProductToProductTag")

  @@index([categoryId])
  @@index([status])
  @@index([sku])
}

model ProductTag {
  id       String    @id @default(cuid())
  name     String
  products Product[] @relation("ProductToProductTag")
}

model Quotation {
  id              String          @id @default(cuid())
  quotationNumber String          @unique
  userId          String
  date            DateTime        @default(now())
  validUntil      DateTime
  status          QuotationStatus @default(DRAFT)
  subtotal        Float
  taxRate         Float           @default(0)
  taxAmount       Float           @default(0)
  discount        Float           @default(0)
  discountType    String?
  shippingCost    Float           @default(0)
  totalAmount     Float
  notes           String?         @db.Text
  terms           String?         @db.Text
  paymentTerms    PaymentTerms    @default(IMMEDIATE)
  currency        String          @default("USD")
  revisionNumber  Int             @default(0)
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt
  activities      Activity[]
  attachments     Attachment[]
  user            User            @relation(fields: [userId], references: [id])
  items           QuotationItem[]

  @@index([quotationNumber])
  @@index([userId])
  @@index([status])
  @@index([createdAt])
  @@index([date])
}


model QuotationItem {
  id          String    @id @default(cuid())
  quotationId String
  productId   String
  quantity    Int
  unitPrice   Float
  discount    Float     @default(0)
  tax         Float     @default(0)
  total       Float
  notes       String?   @db.Text
  product     Product   @relation(fields: [productId], references: [id])
  quotation   Quotation @relation(fields: [quotationId], references: [id], onDelete: Cascade)

  @@index([quotationId])
  @@index([productId])
}

model Attachment {
  id          String    @id @default(cuid())
  quotationId String
  filename    String
  fileUrl     String    @db.Text
  fileType    String
  fileSize    Int
  uploadedAt  DateTime  @default(now())
  quotation   Quotation @relation(fields: [quotationId], references: [id], onDelete: Cascade)

  @@index([quotationId])
}

model Activity {
  id          String    @id @default(cuid())
  quotationId String
  userId      String
  type        String
  description String    @db.Text
  createdAt   DateTime  @default(now())
  quotation   Quotation @relation(fields: [quotationId], references: [id], onDelete: Cascade)

  @@index([quotationId])
  @@index([userId])
}

model Notification {
  id        String   @id @default(cuid())
  userId    String
  title     String
  message   String
  read      Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
  @@index([read])
}

enum Role {
  ADMIN
  MANAGER
  USER
}

enum ProductStatus {
  IN_STOCK
  LOW_STOCK
  OUT_OF_STOCK
  DISCONTINUED
}

enum QuotationStatus {
  DRAFT
  PENDING
  APPROVED
  REJECTED
  EXPIRED
  CONVERTED
  CANCELLED
}

enum PaymentTerms {
  IMMEDIATE
  NET_15
  NET_30
  NET_45
  NET_60
  CUSTOM
}
